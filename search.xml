<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[感性思维和理性思维]]></title>
    <url>%2F2019%2F01%2F10%2F%E6%84%9F%E6%80%A7%E6%80%9D%E7%BB%B4%E5%92%8C%E7%90%86%E6%80%A7%E6%80%9D%E7%BB%B4%2F</url>
    <content type="text"><![CDATA[到底是用感性思维和理性思维长久以来，我都是站在理性的角度来解决问题，经常思考，特别是用批判性思维来解决问题，虽然说小时候也去绘画，也是按照科学的方法，绘画的步骤来进行作画，人物比例，光阴效果，色彩搭配都是有一些依据的，我也认为这是一个比较好的习惯，特别是做产品和交互。 有一段时间还特别反感特别感性的人，有很多不切实际的想象，说的话也没有让人信服；当然了，社会总体价值还是趋于理性的，这也让很多有这些有想法的人生存特别困难。 重新认识感性的力量最近也是看了一些书籍，让我重新认识了感性的力量，以前我绘画创作的时候，花了大量的时间去研究比例关系，即是找到黄金比例，怎么做的“美”，最后得出来的是一种理性的美，仅仅只是一张“还行”的图，因为每一笔，都很守规矩。 一些出名的艺术家，每张作品都带有作者强烈的笔触，比如大伙熟知的《星光灿烂的夜空》，深蓝色调意味忧郁，孤独，又意味着宁静，安详，左边黑色火焰般的树，和漩涡状的夜空，体会得到作者当时发泄自己内心情感，性情又不稳定，内心的矛盾和纠结。本身对作品的解读，就是具有感性思维。我不禁想到了以前和视觉设计师沟通困难的问题，有一些设计是需要在感性的层面上进行交流，更多的理解，感性思维注重的人的感受，更进一步说，是用户体验。好的设计，是与部分用户产生共鸣，带入场景，产生情感。 在男女处理问题上，用感性的思维去交流会更有效，我们会看到一些现象，男人在遇到问题的时候会选择沉默，女人遇到问题的时候，需要是倾诉，对象一般是比较亲密的人，或者是闺蜜，或者是爱人，而这个问题，有时候不需要解决，可能需要的是情绪的共鸣，听完之后可能给对方一个温暖的拥抱。 常规说来，男人更加注重逻辑，注重外在的变化，女人更加偏重感性，在乎他人对于自己的评价。 吵架是男女交往中不可避免的环节，我们会遇到以下这种情况： 男人心想：那么喜欢翻旧账，那么恶毒的词语都想的出来。过去的淑女怎么转眼就变成了悍妇？ 女人的逻辑如下，我用了极端的方式来引起男人的关注。我要用最决绝的话，最后悔的词语来表态，我是在提醒男人：我要的只是你的一点温柔而已。这个你都不答应，我也太没面子了。你快认错吧，只要你认错了，我马上就原谅你了。 女人心想：虽然我喜欢拿你跟人家比较，还不是因为我喜欢你。不然，我怎么可能会跟你好！ 而男人的逻辑是：你说别人好，那你为什么要跟我？既然你不信任我，我们还有什么必要谈下去。既然什么事情都是你在做主，每次都是你在朋友面前，让我下不了台，不给我面子。我们在一起，还有啥意思呢？ 双方都是站在自己的思维考虑问题，却没有站在对方的思维去考虑，缺少同理心。 感性与理性的交替近几年，听到最多的词就是情怀了，在知乎里有这样一句话： 情怀是以心灵的满足而不是以功利的得失作为自己行为标准的一种品质。 情怀定性为一种品质，一种心灵的感受，我遇到过一位特别感性的同事，整天追求情怀，有时候会有一些不那么靠谱的想法，今天一个想法，明天又是一个想法，看到别人的业务做得好，自己又去做一遍，这样变来变去，并不是情怀，而是一种过于“感性的想法”，长期追求和坚持，甚至不求回报，才有可能是一种“情怀”。 人的思想大都来源于无意识和潜意识，所以有时候不想每天浑浑噩噩地度过，就得需要投入意识到自己每天的行为和思想上，我们的潜意识里又是希望偷懒休息，这样心理可以感受愉悦。我们处在一个被信息爆炸的年代，每天看到的大量信息，尤其是花边八卦，各种各样的产品设计都是按照沉浸式，娱乐化的设计，让人产生依赖粘性，无意间时间就是这样溜走，这样很容易变成“感性的思考”，我们看一部电影，或者小说，看到一些描述，和自己内心产生了共鸣，想到了自己过去的经历，或哭，或笑，或难受，这些也让我们产生“感性的思考”。创作的过程很痛苦，尤其是长期产出高质量的内容，或者策划拍摄一部电影，这时候往往需要制定一个详细的计划去落实，又比如那些工作，生活上的反思，总结，处理复杂的问题，就像用计算机当作工具去解决某些事情一样，这时候往往就是“理性的思考”。 后记在处理一些复杂的问题时，需要制订计划，自我反思，总结，要用到“理性的思考”，和人交流，感情问题交流，人际关系，传达一些思想，品牌设计，产品设计等还是需要“感性的思考”，更多的是站在对方的角度来考虑问题，但又不能被“感性的思绪”带偏而导致情绪化，得罪人，希望以后不要做一个耿直BOY。]]></content>
      <categories>
        <category>心理</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>心理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这个月用户增长了吗？读《增长黑客》有感]]></title>
    <url>%2F2019%2F01%2F04%2F%E8%BF%99%E4%B8%AA%E6%9C%88%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E4%BA%86%E5%90%97%EF%BC%9F%E8%AF%BB%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E3%80%8B%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[最近看完了《增长黑客》，结合了之前的工作情况，挑出了当下一些比较重要的方法和一些感触。 黑客本身源于计算机安全，在未经许可情况下通过某种手段载入对方系统达到某种目的，增长黑客是通过某种手段和策略帮助公司成长，不管是初创公司，还是成熟的公司，都可以作为参考，获得用户的增长。下面就列出一些策略，也许可以作为今后产品运营的一些参考。 产品与市场的契合1983年，雅达利公司认为，外星人题材的任何游戏，于是在匆忙中生产了数百万张《城市传说》，结果，这些游戏未能销售出去，最终埋在了墨西哥沙漠中。 时间切换至今日，创业浪潮之中，响应政策，很多人觉得创业目标是，我想做这个产品，我要把他做出来，因为人人都需要他，这完全是基于意淫和幻想，接下用户应该是爆发式的增长，融到钱，公司扩张，上市，然而，他们忽略了一点，用户是否真的需要，市场是否接受，结果奋战数月也无法打动市场，无限惋惜。如今技术井喷，大量技术开源和分享，能不能实现早已不是问题，是不是到底需要才是关键，如果一开始的目标就没有意义，再完美的计划也无济于事。 需求，催生产品的原动力从三个方面来判断 1.需求是否为伪需求 张小龙在某一次产品培训中提到案例是qq邮箱附件功能设计，将用户收到所有邮件里附件单列出来，显示在一处，一屏加载不够，能继续往下，附件可以分组排列，这功能很高级，结果上线后用户不会用，因为附件太多，不好找，也看不完，用户对这个功能完全没有需求，结果上线后，没有什么用户，随后这个功能就下了，我想了想原来在这家公司做的一些功能需求，大部分也是基于老板自己的臆想，所以功能推出来之后用户也没有增长。 2.是否为刚需 这个用得最多的，马洛斯需求，找找日常生活中是否不可或缺。 3.市场是否足够肥，需求量是否足够大。 所在的行行业是否为红海，还是蓝海，如果是蓝海，意味着市场足够大，可以基于两种方式， 估计目标用户基数，消费能力，意愿预算，把这些通过相乘方式得出一个大概数字，与该行业或近似行业公开报告进行对比，另一种评估打算进入市场，原本有多少产值，你的产品通过提供更低的价格、更长的使用周期等，能提升多少效率、节省多少成本，从而折算出相对于原产值的全新规模。 说白了，就是行业数据。 4.变现能力 根据产品特性，找到盈利变现的点，是用户增值服务，广告，还是为卖流量。 最小化产品验证 创新一般都是建立在原有的基础上进行尝试，既然是尝试，就得用最低成本（时间，资金）去试错。 去掉花哨的效果，实现产品最基本的功能，甚至可以是一小段demo+介绍 用户反馈 快速迭代，开发-测量-认知 案例，dropbox, Groupon, Zappos, 大众点评， Hyperlapse dropbox概念视频，Groupon手工制作礼券，Zappos借助商场展示商品，大众点评，手工放置旅游手册饭店信息，Hyperlapse, 录制，设置拍摄速度，分享facebook和Instagram。 好的设计，源自减法。 获取用户基于之前的尝试，积累下来的一批用户，做好“冷启动” 案例，facebook前期，仅仅对常春藤大学学生开放，随后向附近的学校，地区，乃至全美，全世界。 做好高质量的女性运营，良好的社区，更能给予女性安全感，因此他们就能更好的展示自己，与他人互动，小红书早期笔记 知乎早期邀请机制，KOL，业内精英，投资人，产出高质量的内容。 哔哩哔哩，回答二次元相关问题才能注册，筛选出资深动漫爱好者，想要成为会员并非易事。 小米，从竞品网站筛选一批人，请他们试用不断完善中的MIUI，听取反馈意见，作出调整，并对这批人拍摄了一部微电影表示感谢，100个梦想赞助商。 警惕产品“蝗虫”单纯好奇观光客，寻找项目投资人和像我一样做竞品分析的产品人。 会有以下后果： 他们占用了原本属于目标用户的名额； 对社区造成危害； 喜欢乱提意见； 对产品未来决策产生误导。 “笨办法”重视用户，走访并了解真实需求，面对面沟通，吸纳好意见并反馈，让用户有成就感。 聚美优品，注册女性马甲，自己研究并写化妆品使用心得，写软文，注重用户体验，搭建摄影棚，拍摄出高质量的产品。 Strikingly，创始人在facebook上邀请2000多名用户使用自己的产品，每天和他们聊天，甚至邀请他们出来喝咖啡，交朋友，筛选出超级粉丝，举办线下聚会。 有道云笔记，公司内部50名员工，每天重度使用，不断提出意见，修改，小范围邀请意见领袖使用，聆听，实时解答并收集这些意见。 airbnb，租了一台昂贵相机，一家一家上门指导帮房东拍摄。 社交红利与一些大流量的社交产品合作，深度整合，注重“人际互动”和“关系传导”，这个例子就太多了，基本是现在产品的标配，第三方登陆注册等，就不多说了。 数据抓取照搬别人开始，特别注意，防止侵犯他人权益，官方线上搬家。live space用户一键搬家至网易博客，Windows Live Spaces搬至WordPress.com，qq邮箱第三方代收其它邮件，通过通用协议API。通过技术手段，制作出虚拟用户。 内容营销讲用户爱听的故事，最佳案例《最佳丘比特：掌握OkCupid背后的逻辑》。 持续输出内容，特别是高质量内容，依靠内容渗透和维系，为用户提供有价值。 作用主要三方面，吸引流量、培养潜在用户、劝诱转化，特别注意这个劝诱转化，现在诱导已经玩得有点影响用户体验了，特别是小程序和微信公众号，所以这个功能需要酌情设计。 需要有以下注意事项：1.目标受众群体；2.打造内容持续输出的引擎；3.耸动的标题（俗称标题党）；4.保证文章的长度，3000-10000字一篇文章易获得人们主动分享；5.鼓励受众参与互动6.选择合适的发布渠道，例如kindle电子书，多看阅读，豆瓣。 搜索引擎优化营销facebook用户资料优化，产品增加一个站点地图，利用google可以顺着站点地图找到其中链接每个用户个人资料页 twitter主动优化，定期将一段时间内最热门的5万个标签提交搜索引擎。 rapGenius，歌词百科服务在社交网络主页发布消息，邀请热心用户成为官方博客嘉宾，推荐自己喜爱的音乐和歌手，条件是必须在自己个人主页中加入几行RapGenius宣传的HTML代码，内容是贾斯汀.比伯音乐专辑名称和每一首歌对应的RapGenius页面，当时，贾斯汀.比伯的歌曲异常火爆。 TechCrunch通过维基百科建立反向链接。 在维基百科词条下参考资料，及外部链接，区域加上自己站内文章链接，类似的，可以在百度面科的参考资料栏目里，增加一些宣传推广自己站内文章 应用商店优化营销第三方数据追踪服务APP Annie监控大姨妈的aso关键词排名，找到一串近期最火最热的文字，收集起来并且打散，避免产生品牌纠纷，现在已经有一部分网站，支付一些资金，提供aso关键词的优化方案。 circa评分机制，满足条件，使用天数到达3天，启动次数超过10次，评分机制才会出现，现在产品基本上都使用这个策略，比如之前的微信读书，看完一本书之后，提醒去评分，增加应用场景，这样成功率会更高一些。 捆绑下载，这个pc端上安装软件的时候，顺便安装其它的产品类似，在安卓系统用的比较多，先将豌豆客户端下载到用户手机，再用豌豆荚客户里下载应用，不过，这个方法容易产生反感，我自己每次在装软件的时候，会专门仔细看会不会多装其它软件，以免莫名占用手机资源，这个是对用户体验有损耗的，还是甚用。 排队机制这个不得不说已经快玩烂了，但是依然很有效，利用了人的“从众心理”，“饥饿营销”，mailBox，下载后运行，告知用户，别急，你前面还有29468人排队呢。前面排队的人足够多，说明跟对了，前面排队的人很少，则表明自己离正式获得使用权那一天非常接近；无论哪种情况，对于用户来说，都是非常好的正面的暗示作用，运用在线下店，前段时间非常火的鲍师傅，喜茶，每次去逛街的时候，都看到了很多人排队，其实就是运用这个道理，大伙总觉得，这家店怎么这么多人排队，是不是特别好吃，所以也想试试，我也去排队喝过，味道，其实也没有什么特别的，和其它同类产品差不多，后来新闻也说了，排队的人当中有1/3是请来的“演员”，刚开始的运营的时候这个数值可能是2/3，买完之后，这批人会到另外一家门店进行排队。 插队机制有排队，就有插队，人大部分是不愿意排队，做这些无意义事情，特别是在人多的时候，去机场过安检的时候，有一条特殊绿色通道，一方面是留给VIP的客户使用，另一方面又给登机时间快到的乘客有插队快速登记的机会。逢年过节，各大平台开始实行抢票，有的甚至可以进行支付一定费用进行插队抢票。 嵌入式小挂件当时myspace是无法分享视频的，其它的视频公司也不愿意把自己的视频分到myspace，导流不一定成功，youtube却反其行道，把自己的视频分享到myspace，还专门分享制作了一键分享按钮和网页嵌入代码，结果，myspace给了youtube极大的曝光机会，youtube就这样成为了用户在myspace分享视频的首选，习惯和忠城度随之成立，这也是后来很多产品，提供了微信登陆，qq登录，一方面降低注册步骤，另一方面也是利用分一点微信的流量。 mixpanel，刚开始免费提供25000点数值服务，消耗完之后需要每月150美元购买500000点，很多人不愿意，所以就提供了另外一种免费获取点数的方法，在自己的空间或者博客挂置Mixpanel widget，任何人点击就会被带到mixpanel着陆页，并增加175000点，精明的用户掐指一算，相当于抵扣了50美元，相当划算。 宣传报道的方案撰写这个需要长期修炼，对生活有感悟，与读者产生共鸣。 除此之外，还需要，熟悉产品，避免用技术语言。 有一定头脑风暴，幕后趣事、未来计划等都是可以作为题材， 谋篇布局，按照这个格式：简要概述-&gt;话题事件-&gt;核心特色-&gt;主要功能-&gt;团队访谈-&gt;未来计划-&gt;有奖活动-&gt;转化引导。 ##线下至线上携程，在机场，火车站在人们等车或者等飞机时地推。 校园网推广，注册送鸡腿； 盛大网吧推广传奇。 uber在旧金山，芝加哥推广受推崇，旧金山在当地经常下雨，在芝加哥当地丰富的夜生活和数量繁多的体育比赛。 Tinder，在洛山矶最受欢迎的派对圈推广，借鉴facebook，在精英学府开始推广。 华尔街日报电子版，在旧金山各个景点能检索到“华尔街日报wi-fi”开放热点，连接后进入着陆页，填写密码，邮件，用户名。wifi热点推广已经是地推有效的渠道。 海外市场周奕mp3 to CD，“共享软件”；facebook抽离核心代码，开发多语言框架，当地人参与工作；触宝输入法，换肤盈利；猎豹，放弃预装，在google play寻找频次最高词语，专注于清理。 激发活跃linkedin激活机制允许用户导入自己邮箱通讯录的联系人，专门开发了适用于本地邮件收发软件Outlook插件，一键导入储存在本地的通讯录联系人。 重建关系流，注册增加”以往公司与职位“，建立与老同事形成交流，提供额外展示信息，老用户也会受到新用户的邀请，维持活跃。 给内敛用户贴擅长领域的标标签。 A/B测试基本大中厂才有机会测试，基于数据分析。 开发者社区，游客默认头像，我爱IE，刺激有追求的开发者更改头像 airBNB，”保存心愿单“收藏图标由星形改为爱心。 37Signals对CRM注册页面，30天免费试用比注册高额回报帐户更能带来新用户。 电商网站ZAGG，产品详情页，360可旋转大图比静态大图，让收入增加40%。奥巴马竞选，change网站放置全家福比放牛逼的选举视频，能提高支持率40% 降低用户活跃门槛skype，伪立体声实现 qq音乐锁屏歌词，一句歌词一张图片，与专辑封面叠加。 wi-fi万能钥匙，自动从云端获取海量用户主动上传分享的无线热点密码，建立连接，每天询问用户使用情况，并结合后台数据 补贴这个就不说了，用得太多，用烂了，但是依然有效果，滴滴打车红包补贴，包括现在luckin coffee分享好友注册免费喝咖啡等。 从游戏获得灵感星巴克会员卡，高品质的卡设计，会员体系，品牌塑造和身份认同，消费就能升级。 成就奖，完成某项任务就能获得徽章。 Foursquare签到徽章，waze外部可见荣誉。 滴滴打车，”滴米“，根据接单难度来增减，受欢迎好单子，减”滴米“，有难度的接单，增”滴米“，”滴米“越高，越能获得更好的接单机会 游戏的四大特征，目标，规则，反馈系统和自愿参与 机器人这个也不说了，基本上也是玩烂的，但是很有效的策略 Reddit，创建小号，填充高质量初创内容。 豌豆荚”贴吧神兽“ 提高留存留存与流失流失原因，产品品质不行，业务方向有问题，用户被频繁骚扰，话题热度减退，有更好的替代品，其它因素，如需求不再存在，游戏通关，产品生命期终结，产品出现大事故，当下ofo退款困难，滴滴顺风车强奸杀人案等。 优化产品性能这个主要是技术上，应用耗电，CPU占用过高，请求不必要的权限。 facebook，修改手机启动初始化模块，预加载未来可能用到的数据，图片采用WebP格式，优先加载适合当前手机分辨率的图， instagram,扁平设计，重新布局，兼用方法追踪和时点声明技术，程序主体拆解成可以配置模块，延迟加载不必要模块 有损服务反面例子，microsoft office系列，qq农场加载缓慢，列表入口显示不完整， 引导新用户快速上手Twitter在用户注册环节增加推荐关注对象，只需一点鼠标就能批量关注对象 printerest，帐号被安排订阅一批系统推荐帐号，充满了优质高质量图片，每周向用户发送当周热门画板邮件提醒， 社交维系和社交解绑全民飞机大战，合体流程，邀请好友合体，增加自己飞机火力，提高过关成绩，合体的双方都能活的额外积分，每天有三次免费机会。 ”啪啪“，用户通过微博帐号注册产品后，判断该用户的其它微博好友是否加入进来，如果是就推送并提示”您的朋友X也来到了啪啪，赶快关注他/她吧“ facebook，当用户想要注销自己帐号时，确认环节页面提示”他们会想念你的“，并发一张好友的照片。 same，”相遇的人会再相遇“，不关注，无压力，孤独社交。 设计唤醒机制EDM（电子邮件唤醒），消息推送通知，移动网页唤醒， 增加收入免费终结Bidsketch，邮件告知定向邀请用户，产品之初邮件邀请的流量质量，比搜索进来的要高得多，免费用户往往更挑剔，试验性尝试删除免费帐户。 LessAccounting，有试用期，结束后不付费就降级到功能受限免费模式。 重新定向广告现在遇到最多的，浏览了电商网站后，访问其它网站也能不断看到这件商品的广告，强化品牌形象，像Adroll、Retargeter、Chango、google adwords，百度推广经常干这事 Nitro，在线文档服务，针对下载了试用版却在付费阶段戛然而止的用户强化品牌曝光。 Diapers，尿不湿网站，在Facebook上开辟粉丝专页，嵌入特制电商订购功能，只对Diapers.com上下过单老顾客开放，输入帐号和密码后，这个页面显示该顾客在Diapers.com上购买过的商品。 Wet Seal，模特竞选，选出100名面容较好身材火辣模特，用自制视频的拉票形式为Wet Seal的官方facebook主页带来130万粉丝和1000万次点赞、转发。“社交购物”，和友人一起逛街，“DIY”搭配，分享搭配成果，选中某件商品能看到其它用户基于该商品设计的穿搭图。 Etsy建立通过连接facebook帐号读取好友列表，根据好友资料和发布的内容，猜测出他们可能对什么样的手工艺品感兴趣，推荐适合的朋友送礼物。 互联网思维卖月饼-互动式参与消费逻辑思维，找人代付，用户下单，填写收货地址，分享给好友，分享越多，分摊到每个人头上的金额就越少，没有门槛。 两种模式，先到先得，第一时间挤破头参与活动。 随机争抢，扩大参与群体的外沿 月饼节操榜，用户购买量排名和分享量排名，兑换”节操币“，与罗胖面对面的机会，免费住宿， 变惩为奖QQ会员的技术漏洞，做了一个活动页面，“拿什么拯救你，我熄灭的会员图标”，之后开通会员提供8折优惠。 cleanMyMac，软件升级漏洞，给出50%折扣。 建立商业智能系统以小博大 建立完善的销售系统，量化指标，确定每位成员kpi 病毒传播bug营销百度云盘支付BUG，1毛钱可以买一年会员，满足“贪小便宜”心理。 借势营销淘宝和去哪儿针锋相对。 猎豹“抢票”插件，开源在github，借微信大势，关注猎豹微信公众号，自动刷票，查询余票，推荐附近的售票点。 SegmentFault光棍节程序员闯关秀，”苍老师配图”，破解闯关秘籍，二次传播。 构建产品体外循环朋友圈小游戏，追Ta，神经猫，追Ta，整蛊切入点满足人们好奇偷窥心理+情感，高自然流量但内容相对低俗，圈流量 韩国小姐连连看，财务包子铺 产品内置传播因子美图秀秀，测试与明星撞脸，看你老了成怎么样，通过面相算异性缘，看结果，请分享。pk大咖，来自于对人性理解，每个人都渴望摆脱平凡，成为焦点，满足虚荣心。 病毒传播用户心理 乌合之众，群体不善推理，却急于行动，总结出以下特性，1.喜爱，即口碑，2.逐利，粗爆利益交换，3.互惠，即现在流行的双赢。4.求助，即现在拼团，5.炫耀，攀比，产生权力的幻觉；6.稀缺，邀请机制；7.害怕失去或错过，解锁功能扫描另外一台机器二维码；8.懒惰，一键分享等 病毒传播策划与打磨 云诺网盘，“和U盘分手，和云诺约会”，赠送空间容量，世界末日。 云诺网盘活动成功要点： 1不要挑战用户耐心； 2.不要抬高用户的期望； 3.借鉴游戏设计，鼓励用户分享战果； 4.尽量多设亮点，槽点； 5.故意设置漏洞，让高级用户发现，宣传； 6.策划之初要有二次，三次传播计划。 增长黑客背后的道德 快播的不雅视频，疯狂来往自动上传隐私视频，陈老师的“艳照门”等这些事件造成的非常恶劣的社会影响，有人觉得这是一意外事件，有人觉得这是有预谋的恶性炒作，诚然，不管怎么样，这都是挑战道德底线和试探法律边缘，技术本身是中性的，但要看使用技术背后的身影，我们身在的这个时代，还有多少属于自己的隐私。 以上笔记作为工具，工作上遇到可以随时翻阅。 欢迎各位客官拍砖，吐槽。]]></content>
      <categories>
        <category>产品运营</category>
      </categories>
      <tags>
        <tag>运营</tag>
        <tag>产品</tag>
        <tag>策略</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018最后一天，我想说]]></title>
    <url>%2F2018%2F12%2F31%2F2018%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%88%91%E6%83%B3%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[前言上一次使用并发表简书到今天，已经快有2年半了，中途发生了一些事情 ，和小伙伴去做了一个培训教室，没有时间写文章，现在回来了，忽然发现真要写的时候，真的有点词穷，顿时感觉自己离开简书到现在文字表达上还是那么水，记得当时有一个阅读写读后感的计划，每年要求精读10本书，泛读15本，每年共25本，现如今再次重新捡起，之后继续保持按计划行事，作为一个动力，鞭策自己学习，每天都要进步，希望2019能跑得更稳健，而不是更快。 关于创业说不上是什么教训，只是后来的一个反思，最近在想创业到底是为了什么，我理想没有那么高，说得现实就是挣更多的钱，提前财务自由，之前忘了在哪里看到的文章，说创业是有一个很好的想法并要实现出来，才去开一家公司。 当时也没想那么多，就和小伙伴去做这件事了，现在的我有点虚，是心虚，不是身体虚，我身体好得很，心虚是觉得开始为自己找理由，除了搭个创业顺风车，还找不到更好的理由。 说说培训教室的事在市区的内环地带，上海宜山路地段，和小伙伴租了一间空间，准备做一个小型教室，当时碰巧办公场所开业，有一些优惠条件，参考了几间户型就订下了一间，随后就去宜家准备了一些桌子和椅子。培圳行业的主要收入来源于学生，开销包括场所费，老师授课工资，推广费。 课程内容主要包括，生活时尚穿搭，服装设计，插画设计，UI/交互设计等，内容是随着老师的加入而增多，主要都是兼职模式 课程设计为两种，体验课和专业课，体验课时间大都安排在周末，专业课为连续2周左右，分为一，二期。 客户模型，客户A，21岁，服装专业在读学生，正值放暑假，闲暇时间多，需要学习提升；客户B，25岁，公司白领，业余喜欢画画，想来这交到更多志同道合的朋友。 学生来源，免费渠道，豆瓣同城社区，周末去哪儿，活动行，微信4000人号，微信公众号，微博，老师在机构介绍。 收费渠道，大众点评，美团，58同城。 现在的流量转化已经越来越难，免费渠道，几乎是没啥用了，转化很低。 收费渠道的费用都挺高，排名靠前还得另外交钱。刚开始的时候，效果还是有的，平时晚上9点左右，周末下午2点开启收费渠道的置顶模式功能，提高了不少爆光率，来咨询的人数不少，微信号的人数蹭蹭地向上升，转化率统计大约在2-5%左右。 房租是一个高昂的开销，还有一些老师的费用，几乎没有赚钱，倒填了不少进去，也花了不少时间。 项目后的反思创业意味着自由吗，反而更加束缚，就像四肢绑了沙袋，因为没有去拉投资，全是自己贷款，要考虑下个月能不能补上房租，有很多东西无法去做，也很难去实现，因为顾及的东西很多。 有的时候产生分歧，对我影响比较大，内心充满了纠结，有时候会跑去外面的咖啡厅静静坐着，顿时又有了很多想法，内心也会比较充实，慢慢又找回适合自己的方向，或许目前的我，需要更多的一些沉淀，学习，而非急于求成，想着赚钱。 有时候离别，是为了更好的成长，在这个过程中，逐渐认识了自己，也未尝是一件坏事。 不想给别人打工，不一定非得去创业，因为创业不一定适合大多数人，找到属于自己的模式，还有很多路子，比如多读点书，学点算法，学点数据，学点技术，学点心理，从不同角度来看待事物，或许更为客观理性，可以先尝试着去做。 现在比之前更加忙碌了，要学习的东西很多，只能慢慢来，制定好计划；路，要一步步走，饭，要一口口吃，以前去咖啡屋想着一些莫名其妙的事，浪费了很多学习时间，挺后悔的。 2019，祝大家都能找到自己内心想要做的事，找到值得爱的人，走的稳一点，踏实一点。 最后，我又自己折腾了一个博客，网址是https://ewanpm.github.io/，欢迎各位老爷拍砖。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈]]></title>
    <url>%2F2018%2F12%2F19%2F%E6%9D%82%E8%B0%88%2F</url>
    <content type="text"><![CDATA[前段部分来公司有了一些时间了，前前后后折腾了超过半年，从1.6到现在的2.0，前端展示，后台管理，交易所，中途经过了3次迭代，其中2.0为最大一次更新，而现在整个项目现在看来，已经算是基本凉了，一直没有盈利，从启动项目也没打算融资，前段时间的人员也有离开的，公司为了存活下去，方向也开始专攻小游戏，外包，转包业务，以维持日常开销。 关于项目当初来是对着项目而来，自己也很挺喜欢这个项目，简单介绍一下项目，是做泛艺术领域比赛+区块链，匿名评选，问答社区，比赛结束之后前10名的选手可以获得福利币的奖励，福利币，是一种虚拟的货币，每周分发10万枚，和比特币的发放机制类似，具体可以参考比特币的白皮书；参赛选手，举办比赛，投资人一起瓜分这10万枚，具体瓜分细规则先不说。 拉新策略邀请一些画手，艺术从业者，这些人统称为叫特别邀请师，满足这些人的条件是，拥有100个活人铁粉，特别邀请师来平台举办各自领域的比赛，从微博，微信，同学介绍，小型画室/工作室；另外的新用户是从花瓣，站酷里爬的数据，爬下来之后一个个加，再组建群；举办这些比赛，每个人给予1000元奖励，首富30%，即300元作为签约费，剩下700元需要满足的条件，进来成功举办比赛之后，并且粉丝都需要参加至少一场比赛。最终签约了80名特别邀请师，来平台玩的，只有56名。从花瓣，站酷等现有的社交平台里拉来的数据50000条，组成9个活跃社群，每个群差不多450人。 公众号的运营策略这个项目有两个公众号，一个主要方向是区块链，报道当下区块链的一些新闻咨询，一个主要方向是泛艺术心得，包括采访画师，水彩，插画的小小心得，画师/设计的心路历程等一些文章。社群每周举办一次投票小活动，群主收集作品，筛选出10-15副作品，上传至小程序，进行评选，评选之后，第一名的用户可以获得2个福利币。 糗事在2.0上线之前，在现有的群进行宣讲，每天在不同的微信群进行宣讲，承诺福利币在交易所兑换的价格为7元，这个价实在是太高了，开会建议不能这么高，还是以1元比较靠谱，后来因为交易所在撮合方面有严重的延迟(交易所项目是单独外包给外面的公司，技术非常渣，不断测试不断出错，无法按时上线，后来临时出了一版OTC法币交易)而暂停上线，因为app store无法上架带有虚拟货币交易，所以还专门出了一个企业版(带有OTC交易)，大量用户分不清什么事企业版，什么是APP store版，一直不断有人来问，每次都要解释一遍。上线之后，官方不断压制价格，在赞助大赛领导又以大量积分赞助，所有的权重全部在他这，有用户都快直接要过来理论了，现在这里变成一烂摊子，用户流失特别多。 现有的产品规划具体见图 反思项目到现在任何一个项目，不管成功也好，失败也好，都得有个自我反思的过程。福利币发放机制，是领导强制的要求，当时比特币行情也特别好，之前也提过一些意见，区块链终究是还处在探索阶段，落地应用也是在探索，需要大量的时间和资金来支持，更何况之前区块链负面新闻太多了，很多人一致认为是诈骗，按照当时公司的财务情况来看，是一项非常冒险的策略。整个项目还没有实现商业闭环，一直都是公司在输出，用户也是一直得到大量的福利币，这些福利币无法得消耗，兑现的价格又是如此的低，和之前的承诺有冲突，也有不甘心，没什么ATC，福利币该多好。运营的投入力度还是太少了，舍不得花重金来聘请厉害的运营出点子，后面的业务需要大量的运营方案来支撑。由于现在业务调整，新版本的开发将搁置延期。 结束语最后有哪位大佬看到我的，可不可以收留我，勤奋好学，学习能力强，又上进。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>运营</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Next主题 + GitHub搭建博客]]></title>
    <url>%2F2018%2F12%2F12%2FHexo%20%2B%20GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[背景原来自己开发了一个博客，当时也是为了学习技术，了解实现原理，采用node.js+mysql+js，效果真是不堪入目，也有后台管理，功能基本已经实现，但实在不堪入目，写着写着就没什么动力去搞了，无意中了解发现Hexo框架，比worldpress还优雅，是时候该折腾折腾，嗯，说好直接开工，前前后后折腾了差不多一周，白天上班晚上倒腾；虽然教程步骤，网上都有，Hexo，next官方文档写的也是挺详细的，写一个出来加深印象。 需求点Hexo框架实现功能 导航栏：首页，分类，标签，归档，关于我，搜索 标题 分页 markdown写作 第三方实现功能 评论 目录列表 留言数统计 访客人数 字数统计 阅读时长 发表时间 阅读量统计 准备工作之前就已经安装过了node.js，Git和npm，一般我用nvm来管理不同的node.js和npm版本，用终端检查一下他们是否在本机成功安装：12git --versiongit version 2.20.0 12node -vv8.11.3 为了稳妥起见，我用的版本当前比较稳定的版本，有时候最新版可能不一定是最好的。 安装Hexo装好node.js和git之后，可以通过npm来安装。1npm i -g hexo-cli 不出什么问题几分钟之后就装好了 建立网站文件夹在本地的电脑新建立文件夹，算是网站的全部内容，在终端输入hexo的相关命令来初始化该文件夹123hexo init ewan_zheng # ewan_zheng是自己的文件名cd ewan_zhengnpm i 初始化完成之后，基本的hexo框架算是搞定了。 网站结构123456├── config.yml├── package.json├── scaffolds├── source├ ├── _posts└── themes config.yml配置文件，以yml为主，博客名称、关键词、作者、系统语言、主题、常用第三方插件等都在里面 package.json包文件，从官方库里安装包插件内容和对应版本会列在里面，基本可以不修改此文件。 scaffolds脚手架，三种形式的模板，添加一些自定义标签或者类的内容。 source放置博客内容地方，默认只有_post(文章)，后续根据自己需求可以添加自定义文件夹，如Tags，categories，about等 themes主题，Hexo会根据这个文件夹生成静态页面。初始状态下只有landscape一个文件夹，即默认主题，后续添加next主题，或者其他自己喜欢主题。 Hexo常用命令新建初始文件1Hexo init 新建文章页面，还有一种是添加草稿，个人认为草稿的意义不大，在本地直接post就是草稿了，编辑完了直接部署上传1hexo new post "title" 生成静态页面12hexo generatehexo g # 简写 部署12hexo deployhexo d # 简写 启动服务器，默认地址为http://localhost:40001234hexo serverhexo s # 简写 hexo s -p 5000 # 更换一表5000的端口hexo s --w # 启动服务器并且监控状态，有修改就会变化 以上就是用的最多的命令，其他的基本用不着，搭建完成之后，在localhost:4000就能看到内容 设置语言在config.yml找到language:属性，默认不写是英文，改成language: zh-Hans front matter这个可以理解为每篇文章的默认配置12345678---title: Hexo + Next主题 + GitHub搭建博客abbrlink: 16107tags: - Hexo框架- githubcategories: 技术--- 注意，刚开始是没有tags, categories的，首先需要建立相关的文件夹12hexo new page categorieshexo new page tags 能在source文件夹中新建立文件夹categories, tags并且生成的index.md，并在front matter加上type: &quot;categories&quot;, type: &quot;tags&quot;注，标签有两种写法，一种是写成-短划线形式12345678---title: Hexo + Next主题 + GitHub搭建博客abbrlink: 16107tags: - Hexo框架- githubcategories: 技术--- 一种是写成数组形式123456---title: Hexo + Next主题 + GitHub搭建博客abbrlink: 16107tags: [Hexo框架, github]categories: 技术--- 123456---title: 分类date: 2018-12-14 22:08:47type: 'categories'comments: false--- 这里如果添加了comments: false，在该页面不能评论，至于评论功能稍后再说。给模板添加categories，tages在scarffolds文件夹里的post.md文件，在font matter加上categories，tages，这样新创立的文件都会带有这个属性，只要在post文件写分类就会自动带有分类。123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:--- 部署一篇文章写完之后，部署域名到互联网，这里部署到GitHub仓库，当然也可以部署到自己创建的域名。下载git部署依赖包，终端进入站点目录文件下输入1npm i hexo-deployer-git --save 注册GitHub账号1.首先注册一个账号，并且建立一个仓库。2.这里要特别注意，Repository name的名字一定要和Username，即owner名字一样，否则，后期怎么部署都会失败。3.建立好仓库之后，打开刚新建的hexo文件config.yml，搜索找到部署选项，布置一下路径1234deploy: type: git repo: git@github.com:EwanPM/EwanPM.github.io.git branch: master 这里注意两点： 属性与描述之间要有空格，即冒号后面加空格。 git要关联自己的GitHub库，要配置SSH参数，不然这个功能无法生效。 Git关联远程仓库这里以mac系统操作1.创建SSH，在终端输入1cd ~/.ssh 如果出现-bash: cd: ~/.ssh: No such file or directory说明之前没有用过，继续输入命令1ssh-keygen -t rsa -C ewanzheng2012@gmail.com # 这里填入自己注册github的邮箱名字 中途会出现，Overwrite(Y/N)，输入y，表示之前有生成过ssh，新生成的需要覆盖吗，最后出现下面的状况就表示生成成功了确认完毕之后，生成一对秘钥放在文件夹: /users/ewan/.ssh/，有两个文件一个私钥(id_rsa)、一个公钥(id_rsa.pub)，私钥保存在本机电脑上，公钥放在服务器上。服务器的公钥和本地私钥匹配才能访问服务器的代码库，一定要妥善保管私钥，一旦私钥外泄，服务员上的代码也被泄露。(有点区块链的意思) 在Github上关联自己公钥打开finder，shift+command+G，输入/Users/ewan/.ssh/id_rsa进入ssh目录，用记事本打开id_rsa.pub，复制里面的代码登陆Github，找到setting，在SSH and GPG keys导航里，点击New SSH key，粘贴刚才的代码检测是否关联成功，终端输入1ssh -T git@github.com 出现上面结果表明已关联成功最后使用hexo g &amp;&amp; hexo -d就能能将内容推送到github上了，在github上也能看见自己内容，现在算是完成基本功能了。 nexT主题hexo上有很多主题，感谢各路大神开源自己代码，看来看去最终还是选择nexT，优雅，简约，功能挺全的。 安装可以去nexT官网文档去下载，我是直接下的source，解压之后修改文件名为next放在themes目录下。 设置主题打开hexo目录的config.yml找到theme修改主题为next1theme: next 配置next主题进入刚才的next文件夹，找到config.yml，后面有关配置next主题基本都在这个文件修改官方文档有介绍很多功能，默认状态下config.yml很多功能基本注释掉的，根据自己需求，取消注释并补全信息即可。 主题风格打开配置文件config.yml，搜索关键字scheme，将需启动的scheme前面注释取消即可，这里有4种主题，每次只能打开一种，个人比较喜欢mist，muse的简约版本，整洁优雅，其它的效果可以尝试。 评论自己尝试了评论Disqus,changyan, 多说, 来必力感觉都不好使，多说，畅言已经停止更新，这里用Valine，再次验证了那句话，高手在民间，画面简洁，简洁到没有后台，删除和管理评论直接操作数据库。到LeanCloud创建一个开发版(目前免费)。注册好之后进入，新应用名称-&gt;开发版-&gt;创建即可点击储存-&gt;创建Class，弹出创建Class对话框，Class名称要写Comment，ACL权限更改为无限制。设置-&gt;安全中心-&gt;服务开关，打开数据存储，其它的都可以关掉，我试了短信服务和推送服务暂时都失效的。设置-&gt;安全中心-&gt;安全域名添加，每行一个域名，多个域名换行，要注意格式。设置-&gt;应用key最重要的一步了，复制这里的app ID和App Key在next主题配置文件里，搜索valine，把刚才的appid和appkey复制到对应的属性，enable: true运行hexo s看看效果最后是关于邮件提醒，官方文档有介绍，具体操作如下 1234567你在&#123;&#123;appname&#125;&#125; 的评论收到了新的回复&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;/p&gt;&lt;p&gt;你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：&lt;/p&gt;&lt;p&gt;&lt;a href="https://ewanpm.github.io/" style="display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;"&gt;马上查看&lt;/a&gt;&lt;/p&gt; 回复功能算是完毕了，留言数统计也会显示在副标题的描述中。 文章阅读量统计数据刚刚在LeanCloud建立了新帐之后，创建Class，弹出对话框，Class名称要写Counter，ACL权限更改为无限制，完成之后，左边会多出Counter栏目，在主题配置文件，config.yml搜索leancloud_visitors，填入刚才的AppID及AppKey，enable: true，hexo s重新生成刚部署Hexo，就能看到文章阅读量统计了 记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。 –Doublemine上面的这些文章还介绍了一些刷访问量的目的，这里就不多介绍了。 添加搜索功能这里安装algolia，去官网注册，我选择github登录，有14天使用所有功能，若未续费则自动降级为免费用户，每个月只能有100,000次请求API。安装npm install hexo-algolia包1npm install hexo-algolia@1.2.4 --save # 这里安装的版本为，1.2.4 目前最新的版本为1.3.0，试用了一下，搜索出来的结果无法跳转至正确的路径，改url也没有用。获取API keys登录后新建一个index name，后面会用得到之后选择API keys-&gt;YOUR API KEYS，记录复制Application ID, Search-Only API Key, Admin API Key前往站点配置文件，打开config.yml添加以下代码12345# Algolia Search API Keyalgolia: applicationID: 'Application ID' apiKey: 'Search-Only API Key' indexName: '输入刚才创建index name' 修改Algolia搜索ACL(访问控制列表)和之前在leancloud一样，创建新的class需要把权根改为无限制，打开ALL API KEYS添加上面的选项，然后保存。操作完成之后在终端输入以下命令123export HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key #(windows为set) (Powershell 用 $env:) export HEXO_ALGOLIA_INDEXING_KEY #查看是否设置成功如果没有值就设置失败 #(Mac和git bash 为 export) (Powershell 用 $env:) hexo algolia 前往主题配置文件，搜索找到Algolia Search，修改以下代码123456789# Algolia Searchalgolia_search: enable: true hits: per_page: 10 labels: input_placeholder: 请搜索关键字 hits_empty: "没有找到结果: $&#123;query&#125;" hits_stats: "找到$&#123;hits&#125;条结果(用时$&#123;time&#125;ms)" 搜索找到URL，把URL地址更改为123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://ewanpm.github.io/ # http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults: hexo s刷新，发现已经可以使用了。 网站页脚添加总访问量找到路径，themes/next/layout/_partial/footer.swig中添加busuanzi.js，代码如下1&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 注意：站点总访问量是用不蒜子来统计的，近期的官方文档的域名过期了，js的引用可能有问题，接下来找到文件路径/theme/next/layout/_third-party/analytics/busuanzi-counter.swig，找到域名并替换为1&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 安装标签算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。123&lt;span id="busuanzi_container_site_pv"&gt; 本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次&lt;/span&gt; 算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。123&lt;span id="busuanzi_container_site_uv"&gt; 本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人次&lt;/span&gt; 这里采用第二种算法b。在主题配置文件，config.yml添加以下内容12# visitors count counter: true 在themes/next/layout/_partial/footer.swig中添加以下代码12345&#123;% if theme.footer.counter %&#125; &lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &lt;span id="busuanzi_container_site_uv"&gt;本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人&lt;/span&gt;&#123;% endif %&#125; 大功造成。还有一点，在本地运行会发现访问量数字巨大，这是因为 这是由于不蒜子用户使用一个存储空间，所以使用localhost:4000进行本地预览的时候会导致数字异常，这是正常现象，只需要将博客部署至云端即可恢复正常。 至此，基本实现了想要的功能，终于可以开心地写写东西了，后面陆续把原来文章迁移到这里，另外还有一些优化和其它功能，等闲了一段时间后再来试试。 参考https://valine.js.org/visitor.htmlhttps://ioliu.cn/2017/add-valine-comments-to-your-blog/https://hexo.io/docs/http://theme-next.iissnan.com/getting-started.htmlhttps://www.jianshu.com/p/21c94eb7bcd1https://www.jianshu.com/p/c311d31265e0]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo框架</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OTC法币交易]]></title>
    <url>%2F2018%2F11%2F04%2FOTC%E6%B3%95%E5%B8%81%E4%BA%A4%E6%98%93%2F</url>
    <content type="text"><![CDATA[写在前面的话10月份基本上主要在梳理OTC的需求，前期计划需要3天时间弄出来，结果修修整整弄了一个月，流程虽然谈不上复杂，但是异常的情况比较多，有许多情况都是在开发的过程中，写测试用例遇到的，中途又调整了很多次细节，哪怕是上线的前两天，都在调整，大家都在为了把产品做好，挺感谢大家的。 关于区块链说到区块链不得不说到炒币，去年的今日，比特币市值突破8000亿美金，一年后的今天，只有1000亿美金，很多人赚了钱最后都吐回去，并且还亏了本，这还是一个新兴的市场，中本聪的这套比特币通货紧缩机制，去中心化，安全性，都得到了印证，很多公司都打着区块链的晃子进行集资，让萌新不断入场，ICO搞一波割一把韭菜，人人都可以发币，人人都可以开交易所，导致垃圾币和垃圾交易所大量上市，很多新币种都长时间没有交易量，钱投进去了，不一能出来，最后人去楼空，明年行业会洗牌，大量的交易所倒闭，大量的空气币归零，或许是件好事，留下的必定是优质资产，闲扯了这么多还是说一下正经事，需求参考了现在火币，okex的OTC交易流程，简单说，就是点对点交易，即，A用人民币(法币)向B购买虚拟货币。 OTC需求结构OTC业务流程OTC法币交易出发短信资产状态变化发布广告收款方式OTC原本来源于证券市场，最早的叫法源自美国 OTC即柜台交易市场或场外交易市场，是指在证券交易所以外的市场所进行的股权交易 OTC流程 整个流程中，卖家和买家的交互比较多，中间打款的时候还涉及到第三方app登录，支付宝，微信转账，银行卡转账等，产生的纠纷也很多，在后面的原型的稿的整理的时候出现了很多坑，仍然无法提供一个非常好的解决方案。下面具体列举出一个业务场景，给出的一个解决办法： 买家已点击我已打款，卖家查收账户的时候没有收到，电话沟通没结果，此时卖家申诉买家，买家订单状态变成申诉，若买家主动联系客服调解，客服后台修改买家订单状态，买家再次打款给卖家，卖家验证成功后放行货币，订单完成。 若买家不主动联系客服，客服后续介入，通知买家已经被申诉，马上处理订单，买家再次打款给卖家，卖家验收后放行货币，订单完成。若无论怎样都无法联系买家，客服会强制封号，该笔订单取消。那么问题来了，怎么保证卖家有没有欺骗对方或者客服，或者说，买家已经打过款给卖家，卖家不承认，此时买家用订单转账记录的截图给客服，经过确认，通知卖家放行，这里还有一个新坑，有可能买家的转账记录是经过PS的，本质上买家就没有打钱，现在扯皮扯不清楚了，出现这种情况，客服把订单取消，损失由买家或者卖家承担，这两个账号都会列入重点关注对象。火币，okex是站在商家的利益来考虑的，相信商家，想要成为商家，要求是很高的，需要有至少RMB50000保证金，不知道现在有没有改。 下面是原型需求稿，由于时间比仓促，没来得及排版，后面开发和测试在细节和异常情况做了补充。 后续会持续完善文档，争取做得更好，目前倒是没什么机会更新完善了，因为已经凉了。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>原型设计</tag>
        <tag>OTC</tag>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抽奖研究分析]]></title>
    <url>%2F2018%2F10%2F03%2F%E6%8A%BD%E5%A5%96%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前言只要是营销的场景，肯定逃不脱抽奖，研究好抽奖可以说是必修课之一，算法也是多种多样，这次以奖品的权重来抽奖。 奖品设置奖品实体必须含有两个字段，一个用于区分的奖品名称/ID；一个奖品权重请看表格，进行如下设置抽奖的逻辑可以用下面这张图表示 算法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107import java.util.ArrayList;import java.util.List;public class PrizeTest &#123; /** * 根据Math.random()产生一个double型的随机数，判断每个奖品出现的概率 * @param prizes * @return random：奖品列表prizes中的序列（prizes中的第random个就是抽中的奖品） */ public static int getPrizeIndex(List&lt;Prize&gt; prizes) &#123; int random = -1; while(random &lt; 0 ) &#123; try &#123; //计算总权重 double sumWeight = 0; for (Prize p : prizes) &#123; sumWeight += p.getPrize_weight(); &#125; //产生随机数 double randomNumber; randomNumber = Math.random(); //根据随机数在所有奖品分布的区域并确定哪个名称里 double d1 = 0; double d2 = 0; for (int i = 0; i &lt; prizes.size(); i++) &#123; d2 += Double.parseDouble(String.valueOf(prizes.get(i).getPrize_weight())) / sumWeight; if (i == 0) &#123; d1 = 0; &#125; else &#123; d1 += Double.parseDouble(String.valueOf(prizes.get(i - 1).getPrize_weight())) / sumWeight; &#125; if (d1 &lt;= randomNumber &amp;&amp; randomNumber &lt; d2) &#123; random = i; break; &#125; &#125; &#125; catch (Exception e) &#123; System.out.println("出错原因：" + e.getMessage()); &#125; &#125; return random; &#125; public static void main(String[] agrs) &#123; int i = 0; List&lt;Prize&gt; prizes = new ArrayList&lt;Prize&gt;(); Prize p1 = new Prize(); p1.setPrize_name("名称1"); p1.setPrize_weight(1);//权重设置成1 prizes.add(p1); Prize p2 = new Prize(); p2.setPrize_name("名称2"); p2.setPrize_weight(2);//权重设置成2 prizes.add(p2); Prize p3 = new Prize(); p3.setPrize_name("名称3"); p3.setPrize_weight(3);//权重设置成3 prizes.add(p3); Prize p4 = new Prize(); p4.setPrize_name("名称4"); p4.setPrize_weight(4);//权重设置成4 prizes.add(p4); int[] result=new int[prizes.size()]; System.out.println("开始.。。"); for (i = 0; i &lt; 100; i++)// 打印100个测试概率的准确性 &#123; System.out.println("第"+i+"次使用："+prizes.get(getPrizeIndex(prizes)).getPrize_name()); result[getPrizeIndex(prizes)]++; System.out.println("--------------------------------"); &#125; System.out.println("结束。。。"); System.out.println("每家供应商的使用数量为："); System.out.println("名称1："+result[0]); System.out.println("名称2："+result[1]); System.out.println("名称3："+result[2]); System.out.println("名称4："+result[3]); &#125; static class Prize&#123; private String prize_name;//名称 private int prize_weight;//权重 public String getPrize_name() &#123; return prize_name; &#125; public void setPrize_name(String prize_name) &#123; this.prize_name = prize_name; &#125; public int getPrize_weight() &#123; return prize_weight; &#125; public void setPrize_weight(int prize_weight) &#123; this.prize_weight = prize_weight; &#125; &#125;&#125; 打开终端，对PrizeTest进行编译，然后运行12javac PrizeTest.javajava PrizeTest 得出的结果结束。。。每个奖品名称的使用数量为：名称1：9名称2：26名称3：25名称4：40 设置的奖品数量只有100，计算的结果基本符合预期，数字越大，越准确。 其他情况如果预想中奖率是100%，那么10个奖品只能抽奖10次，所以还要根据实际情况设置每种奖品数量和权重。如果需要设置中奖率不为100%，可以添加一个“伪奖品”进行站位，为其设置权重，那么抽到这个“伪奖品”的概率就是不中奖的概率。这个是在奖品充足的时候情况下，如果在抽奖活动中某个奖品抽完了，做个判断，即此奖品剩余数量为0，则重新抽取一次，一直到抽到其他还有剩余的奖项为止。 参考的资料是要联动数据库的，这里做了一些简单的处理，理解核心业务逻辑。 参考资料：https://blog.csdn.net/a46788304/article/details/65437754]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>抽奖</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微软开源Sketch2Code,草图变代码]]></title>
    <url>%2F2018%2F09%2F07%2F%E5%BE%AE%E8%BD%AF%E5%BC%80%E6%BA%90Sketch2Code-%E8%8D%89%E5%9B%BE%E5%8F%98%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[今天在看微信公众号的时候，发现一个特牛逼的东西，Sketch2Code 用户界面设计过程涉及大量创造性的迭代工作。这个过程通常从在白板或白纸上画草图开始，设计师和工程师分享他们的想法，尽力表达出潜在的客户场景或工作流程。当他们在某个设计上达成一致之后，通过照片的形式将草图拍下来，然后手动将草图翻译成 HTML 代码。翻译过程需要耗费很多时间和精力，通常会减慢设计过程。 Sketch2Code 是一个基于 Web 的解决方案，使用 AI 将手绘的用户界面草图转换为可用的 HTML 代码。Sketch2Code 由微软和 Kabel、Spike Techniques 合作开发。读者可以在 GitHub 上找到与 Sketch2Code 相关的代码、解决方案开发过程和其他详细信息。 项目地址原码：https://github.com/Microsoft/ailab/tree/master/Sketch2Code 在微软官网做一些尝试:https://sketch2code.azurewebsites.net/ sketch2Code架构，工作流程 自己尝试了一下，这货简直吊炸天，不得不佩服，减少了页面布局这样无脑行为，更加专注逻辑，现在的能力还无法读懂源码，有点遗憾目前不能支持中文转译，源文件放中文就会出乱子。]]></content>
      <categories>
        <category>资讯</category>
      </categories>
      <tags>
        <tag>microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cli部署及nginx安装配置]]></title>
    <url>%2F2018%2F09%2F03%2Fvue-cli%E9%83%A8%E7%BD%B2%E5%8F%8Anginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[开始之前以前的博客用的vue+node编写的，webpack做好打包文件之后，在项目文件夹下生成dist(webpack 3.0以上)文件，这个文件夹就是要部署的文件目录，另外，server文件需要单独上传，与dist同目录。 安装Nginxnginx是一款轻量级高性能HTTP和反向代理服务，在阿里注册了一个域名之后，可以无限的生成二级，三级，四级域名，对应不同项目目录。 在VPS服务器上需要下面三个依赖包: SSL功能需要openssl库，下载地址 http://www.openssl.org/ rewrite模块需要pcre库，下载地址 http://www.pcre.org/ gzip模块需要zlib库，下载地址 http://www.zlib.net/ Nginx安装包 进入任意目录下载以上压缩包(版本号改为最新即可)： 注意各个目录下的是 configure 还是 config 1234567891011[root@host zlib-1.2.11]# ./configuer[root@host zlib-1.2.11]# make[root@host zlib-1.2.11]# make install[root@host pcre-8.41]# ./configuer[root@host zlib-1.2.11]# make[root@host zlib-1.2.11]# make install[root@host openssl-fips-2.0.16]# ./config[root@host zlib-1.2.11]# make[root@host zlib-1.2.11]# make install[root@host nginx-1.13.7]# ./configure --with-pcre=../pcre-8.41/ --with-zlib=../zlib-1.2.11/ --with-openssl=../openssl-fips-2.0.16/ [root@host nginx-1.13.7]# make[root@host zlib-1.2.11]# make install 安装3个依赖包，分别进入各自解压目录 注意：安装 C++ 编译环境 （上面安装过程中如若有报错，可以看看是不是因为没有安装这个，可提前安装） 1yum install gcc-c++ 123[root@host ~]# cd /usr/local/nginx[root@host nginx]# lsclient_body_temp conf fastcgi_temp html logs nginx.conf proxy_temp sbin scgi_temp uwsgi_temp 安装好的Nginx路径在 /usr/local/nginx 配置文件路径： 1/usr/local/nginx/conf/nginx.conf 运行Nginx1234567[root@host~]# cd /usr/local/nginx/sbin[root@hostsbin]# ./nginx// 查看是否运行成功[root@hostsbin]# netstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 3525/nginx: master 安装成功的话，浏览器输入 IP 地址或域名即可见到欢迎页面。 使用server命令启动nginx命令现在nginx启动、关闭比较麻烦，关闭要找到PID号，然后杀死进程，启动要进入到 /usr/local/nginx/sbin 目录下使用命令，为此我们通过设置System V脚本来使用server命令启动、关闭、重启nginx服务。 1.在 /etc/init.d 目录下创建nginx启动脚本文件 12[root@host ~]# cd /etc/init.d[root@host init.d]# vi nginx 2.将以下代码复制粘贴，保存。 注意 NGINX_BIN、CONFIGFILE、PIDFILE 三个目录要对应好，默认是对应好的。在网上找了好多相关脚本代码，都有很多问题，好像是和 CentOS 版本有关，下面脚本我在 CentOS 7 下使用正常，直接从服务器下载用sublime编辑，效率比在vps上vi编译高多了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#! /bin/sh # chkconfig: 2345 55 25 # Description: Startup script for nginx webserver on Debian. Place in /etc/init.d and # run 'update-rc.d -f nginx defaults', or use the appropriate command on your # distro. For CentOS/Redhat run: 'chkconfig --add nginx' ### BEGIN INIT INFO # Provides: nginx # Required-Start: $all # Required-Stop: $all # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: starts the nginx web server # Description: starts nginx using start-stop-daemon ### END INIT INFO # Author: licess # website: http://lnmp.org PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin NAME=nginx NGINX_BIN=/usr/local/nginx/sbin/$NAME CONFIGFILE=/usr/local/nginx/conf/$NAME.conf PIDFILE=/usr/local/nginx/logs/$NAME.pid case "$1" in start) echo -n "Starting $NAME... " if netstat -tnpl | grep -q nginx;then echo "$NAME (pid `pidof $NAME`) already running." exit 1 fi $NGINX_BIN -c $CONFIGFILE if [ "$?" != 0 ] ; then echo " failed" exit 1 else echo " done" fi ;; stop) echo -n "Stoping $NAME... " if ! netstat -tnpl | grep -q nginx; then echo "$NAME is not running." exit 1 fi $NGINX_BIN -s stop if [ "$?" != 0 ] ; then echo " failed. Use force-quit" exit 1 else echo " done" fi ;; status) if netstat -tnpl | grep -q nginx; then PID=`pidof nginx` echo "$NAME (pid $PID) is running..." else echo "$NAME is stopped" exit 0 fi ;; force-quit) echo -n "Terminating $NAME... " if ! netstat -tnpl | grep -q nginx; then echo "$NAME is not running." exit 1 fi kill `pidof $NAME` if [ "$?" != 0 ] ; then echo " failed" exit 1 else echo " done" fi ;; restart) $0 stop sleep 1 $0 start ;; reload) echo -n "Reload service $NAME... " if netstat -tnpl | grep -q nginx; then $NGINX_BIN -s reload echo " done" else echo "$NAME is not running, can't reload." exit 1 fi ;; configtest) echo -n "Test $NAME configure files... " $NGINX_BIN -t ;; *) echo "Usage: $0 &#123;start|stop|force-quit|restart|reload|status|configtest&#125;" exit 1 ;; esac 3.修改脚本权限 1chmod a+x /etc/init.d/nginx 4.注册成服务 1chkconfig --add nginx 5.设置开机启动 1chkconfig nginx on 这样就可以在任意目录通过service启动、关闭nginx 123[root@host ~]# service nginx start[root@host ~]# service nginx stop[root@host ~]# service nginx restart 配置nginx进入nginx下的conf，用编译器打开配置文件nginx.conf，这里下载到本地用sublime打开，方便修改，一般都是修改server里面的内容 1cd /usr/local/nginx/conf 前后端分离，Ajax api接口跨域，node代理和nginx代理 这个博客数据请求服务是用node.js写的，会出现跨域，本地测试的时候在build/config/index.js加入以下语句实现代理 node服务器，在本地测试的时候用的跨域设置 1.比如`ajax接口&quot;/getArticle&quot;，本地”localhost：8080/getArticle”，有接口跨域的问题。` 2.localhost:8080 =&gt; http://localhost:3000/api，本地开启服务器实现代理。 在nginx服务器配置文件nginx.conf： 123456789http &#123; server &#123; listen 80; #本地端口 server_name localhost; location ~*/get*|post* &#123; #nginx正则匹配(可高度自定义) proxy_pass http://127.0.0.1:3000; #反向代理 &#125; &#125;&#125; 比如ajax接口”/getArticle”，本地”localhost：80/getArticle”，有跨域的问题。 localhost:80 =&gt; http://127.0.0.1:3000 本地开启服务器实现代理 nginx反向代理更多配置查询http://www.nginx.cn/115.html 注意nginx上写发与本地测试不一样，本地代理服务失效，如果直接location 下写，还是无法通过api获取数据库数据，因为找不到地址， 因此要对location匹配正则，获得正确地址 12345location ~*/get*|post* &#123; proxy_pass http://127.0.0.1:3000;&#125;//也可以这么写location /api 向后端express, api请求数据 HTML 5 History模式vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。 相当于请求的是虚拟地址，需要后台设置nginx支持，即就是将所有的前端目录下的请求，统统传到前端index文件上，做路由分发。 这个vue项目使用了HTML 5 History 模式，为了把url的”#”去掉，即在路由设置history模式 因此会遇到问题，进入首页的时候可以正常访问，一旦在浏览器地址栏输入其他地址或者刷新就会出现404问题，因为vue路由编译的dist并没有真正把资源提供给nginx或者其他服务器，所以，需要转交vue-router来做前端路由 所以还需要向nginx添加 123location / &#123; try_files $uri $uri/ /index.html&#125; 这个也是来自VUE官方文档，对nginx的配置，其他类型服务器也有对应设置 VUE H5 History配置 至此整个部署已经完毕，nginx.conf设置server部分如下 12345678910111213141516171819202122server &#123; listen 80; server_name ewanzheng.top; charset utf-8; root /usr/local/nginx/html/yublog/dist;#上传后放在服务器上的项目地址 index index.html index.htm; location ^~/api &#123; proxy_pass http://127.0.0.1:3000; &#125; location / &#123; try_files $uri $uri/ /index.html; proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_set_header X-Forwarded-Proto $scheme; #proxy_set_header X-Nginx-Proxt true; error_page 404 /index.html; &#125; error_page 500 502 503 504 /50x.html; &#125; 重启服务器，页面就可以正常访问了，API也能正常拿到 参考资料 vue+node部署上线 前后端分离，ajax api接口跨域，node代理和nginx代理]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vue-cli</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装mysql 5.7.19]]></title>
    <url>%2F2018%2F09%2F02%2Fcentos7%E5%AE%89%E8%A3%85mysql-5-7-19%2F</url>
    <content type="text"><![CDATA[开始之前这个是用来记录在vps装mysql的过程，前前后后折腾了两天，比较痛苦，中途安装失败重装了几次，因为用的是国外的官网下载，因此加了代理服务，下载速度5MB/s，妥妥的 准备工作安装之前需要检查当前服务器环境是否安装了Mariadb，一般情况下，系统会默认装了Mariadb 1rpm -qa | grep mariadb 得到如下结果 1234mariadb-5.5.56-2.el7.x86_64 mariadb-devel-5.5.56-2.el7.x86_64 mariadb-libs-5.5.56-2.el7.x86_64 mariadb-server-5.5.56-2.el7.x86_64 输入一下代码，一一卸载，不同版本启动服务容易产生冲突 1rpm -e --nodeps mariadb-5.5.56-2.el7.x86_64 mariadb-devel-5.5.56-2.el7.x86_64 mariadb-libs-5.5.56-2.el7.x86_64 mariadb-server-5.5.56-2.el7.x86_64 进入root目录（也可以其他目录，下载存放的文件夹） 1cd /root 下载安装1wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz 解压至/usr/local/目录下 1tar -xzvf mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz -C /usr/local/ cd到/usr/local目录，把解压的数据库默认名字换一换 12cd /usr/localmv mysql-5.7.19-linux-glibc2.12-x86_64 mysql 检查库文件是否有删除，若有便删除（linux系统自带的） 1[root@host mysql]# rpm -qa | grep mysql 检查mysql组和用户是否存在，如无创建 12[root@host~]# cat /etc/group | grep mysql[root@dbserver~]# cat /etc/passwd |grep mysql 建立一个mysql的组 1[root@host~]# groupadd mysql 建立mysql用户，并且把用户放到mysql组 1[root@host~]# useradd -r -g mysql mysql 如果有输入删除原来用户和组 1userdel mysql 这里的mysql是用户名字，当初建立组的时候设定 cd到mysql文件夹 创建mysql组和mysql用户 12[root@host~]#groupadd mysql[root@host~]#useradd -r -g mysql mysql 在 mysql 文件下添加 data 目录 1[root@host mysql]# mkdir data 更改mysql目录下所有的目录及文件夹所属组合用户 12345cd /usr/local/chown -R mysql mysql/chgrp -R mysql mysql/cd mysql/ls -l 初始化进入/mysql/bin文件夹，初始化数据库 1[root@host bin]# ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql/--datadir=/usr/local/mysql/data/ 初始化中出现 error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory的错误，如图所示 这里需要libais包，可以解决办法 1[root@host bin]# yum install -y libaio 注意，为了预防其他事件出现，建议把环境改成英文，以后系统最好也用原版英文不会有语言兼容而报错，输入下面代码 1[root@dbserver bin]# ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --lc_messages_dir=/usr/local/mysql/share --lc_messages=en_US 在执行一次，出现下面结果，注意，记住最后数据库的初始密码 12345678910112018-08-21T14:56:56.679269Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2018-08-21T14:56:56.974223Z 0 [Warning] InnoDB: New log files created, LSN=457902018-08-21T14:56:57.017598Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2018-08-21T14:56:57.074003Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 730a0cba-a552-11e8-92c5-aaaa000f87e0.2018-08-21T14:56:57.075679Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2018-08-21T14:56:57.076236Z 1 [Note] A temporary password is generated for root@localhost: **-/RrM;0k1jdo** 配置my.cnf进入 /usr/local/mysql/support-files/ 目录下，查看是否存在my-default.cnf 文件，如果存在直接 copy 到 /etc/my.cnf 文件中 1cp -a ./support-files/my-default.cnf /etc/my.cnf 如果不存在 my-default.cnf 文件, 则在 /etc/ 目录下创建 my.cnf 123cd /etc/touch my.cnfvi my.cnf 输入以下内容 123\#[mysql]\#basedir=/usr/local/mysql/\#datadir=/usr/local/mysql/data/ 启动服务12[root@host mysql]# cd /bin[root@host bin]# ./mysqld_safe --user=mysql &amp; 如图所示 将mysqld服务加入VPS开机自启动项将{mysql}/ support-files/mysql.server 拷贝为/etc/init.d/mysql并设置运行权限，这样就可以使用service mysql命令启动/停止服务， 否则就只能使用{mysql}/bin/mysqld_safe &amp;命令来启动服务 还需要把mysql.server中basedir的相关路径，改为自定义的路径，默认路径是/usr/local/mysql 12345678910[root@host bin]# cd ../support-files [root@host support-files]# cp mysql.server /etc/init.d/mysql [root@host support-files]# chmod +x /etc/init.d/mysql -- 把mysql注册为开机启动的服务 [root@host support-files]# chkconfig --add mysql-- 查看是否添加成功[root@dbserver support-files]# chkconfig --list mysqlNote: This output shows SysV services only and does not include nativesystemd services. SysV configuration data might be overridden bynative systemd configuration.If you want to list systemd services use 'systemctl list-unit-files'.To see services enabled on particular target use 'systemctl list-dependencies [target]'.mysql 0:off 1:off 2:on 3:on 4:on 5:on 6:off 启动服务 12cd /usr/local/mysql/bin[root@host bin]# service mysql start 终于搞定了，/(ㄒoㄒ)/~~哭一下 也有可能会出现报错， 出现这样情况解决办法 123456[root@host mysql]# rm /etc/my.cnfrm:remove regular file'/etc/my.cnf'? y [root@host mysql]# /etc/init.d/mysql startStartingMySQL.Loggingto'/usr/local/mysql/data/dbserver.err’.SUCCESS! [root@host mysql]# service mysql startStarting MySQL SUCCESS! 登录mysql 12[root@host bin]# ./mysql -u root -p密码是-/RrM;0k1jdo，之前随机生成的 设置密码，更改为root 1mysql&gt; set password=password("root"); 1Query OK, 0 rows affected, 1 warning(0.00sec) 如果忘记了密码还可以这样操作 123456789101112[root@host bin]# /etc/init.d/mysql stop[root@host bin]# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;[root@host bin]# mysql -u root mysqlmysql&gt; UPDATE user SET Password=PASSWORD('newpassword') where USER='root';// 上面语句若出错，换为update mysql.user set authentication_string=password('newpassword') where user='root'mysql&gt; FLUSH PRIVILEGES;mysql&gt; quit[root@host bin]# /etc/init.d/mysqld restart[root@host bin]# mysql -uroot -pEnter password:mysql&gt; 设置远程登录权限123456mysql&gt; grant all privileges on *.* to'root' @'%' identified by 'root';Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; quitBye 进程关闭若以上步骤中出现其他错误，可以看看 mysql 是否关闭了，先关闭端口，然后在试试 1[root@host ~]# netstat -tpln 1[root@host ~]# kill -9 17072 如果netstat功能无法实现，需要执行下面的语句 1yum install net-tools 就能解决问题 写在后面的话 Navicat连接vps mysql Navicat在v12以下是不能连上服务器的mysql，本地的可以，解决办法，只要升级Navicat premium版本到v12.0以上就可以连接成功 参考： https://blog.csdn.net/zhou920786312/article/details/77750604]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>server</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装Node.js]]></title>
    <url>%2F2018%2F09%2F01%2Fcentos7%E5%AE%89%E8%A3%85Node-js%2F</url>
    <content type="text"><![CDATA[服务器用的搬瓦工最低配，速度和性能都不错，还有优惠券折扣6%（自己Google找优惠券），支持支付宝付款，适合学习研究，满足大部分需求，这个博客系统的后台用的node.js来做接口，抓取数据；这次安装node的版本为v8.9.1，本地测试的版本v8.11.3 之前的尝试这个方法相对最简单，效率最高。这里还是先要吐槽一下，当我还没有找到这种方法，给折腾了两三天，又是安装gcc, gcc-c++,rpm，结果装完在安装node，又是报错C++ compiler too old, need g++ 4.9.4 or clang++ 3.4.2 (CXX=g++)，还说我的gcc版本太旧（rpm装的是gcc-5.1.1），手动下载gcc 7.3.0，编译，我哩个去还，编译的1个半小时不说，结果，还是报错了-_-|||，说我的swap太小，需要增加（当时用的是centos6），无奈之下增加swap，继续折腾，gcc版本还是不够，搞不定了，系统重装centos7，后来无意发现以下这样方法，赶紧记下来。 直接安装编译好的 Nodejs下载对应的二进制文件找到一个目录，存放下载安装文件，我这里是/download 1wget -c https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz; 备注：如果没有找到wget命令，说明没有安装wget，终端输入yum -y install wget进行安装，wget依赖搞定 提取文件1tar -xvf node-v8.9.1-linux-x64.tar.xz 解压之后得到的文件夹就是已经安装好的 Nodejs 了，为了方便我们可以把它重命名一下,（在这里我把它放到了 用户根目录下面的 app 的文件夹里，你也可以换成其他路径）： 1mv node-v8.9.1-linux-x64 ~/app/nodejs 这种方式安装的 Nodejs 并不完美，Nodejs 的命令 node 和 npm 并不能在全局使用。为了解决这个问题，我们需要建立两个软链接： 12sudo ln -s ~/app/nodejs/bin/node /usr/local/bin/nodesudo ln -s ~/app/nodejs/bin/npm /usr/local/bin/npm 其中，~/app/nodejs 是我们刚才安装的 Nodejs 的路径，在建立软链接的时候要注意区别现在，node 和 npm 可以在全局使用了，同样输入命令 node -v 来检查 Nodejs 是否安装成功 12[root@host src]# node -vv8.9.1 备注：如果遇到在 npm 下全局安装的模块无法直接在 bash 中执行。例如，我们要在 npm 中安装 yarn： 123$ npm install -g yarn $ yarn bash: yarn: command not found... 为了解决这个问题，我们需要在 Linux 上手动配置环境变量。编辑 /etc/profile 文件： 1sudo vi /etc/profile 在文件的底部，添加下面两行代码： 12export NODE_HOME=~/app/nodejs/binexport PATH=$NODE_HOME:$PATH 1:wq 1234保存退出reboot一下系统，npm 全局安装的模块也可以使用了： $ yarn yarn install v1.3.2info No lockfile found.[1/4] Resolving packages…[2/4] Fetching packages…[3/4] Linking dependencies…[4/4] Building fresh packages… info Lockfile not saved, no dependencies.Done in 0.13s.123```输入`node -v`测试是否成功安装： [root@host ~]# node -vv8.9.1`至此，Nodejs 的安装已经顺利完成]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Linux</tag>
        <tag>server</tag>
      </tags>
  </entry>
</search>
